"""remove user_roles table

Revision ID: 8121d92ddab9
Revises: 96dc8e49d27c
Create Date: 2023-07-26 18:20:48.696621

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "8121d92ddab9"
down_revision = "96dc8e49d27c"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("vehicle")
    op.drop_table("customer")
    op.drop_index("ix_customer_vehicle_id", table_name="customer_vehicle")
    op.drop_table("customer_vehicle")
    op.drop_table("service")
    op.drop_table("address")
    op.drop_index("ix_user_id", table_name="user")
    op.drop_table("user")
    op.drop_table("user_role")
    op.drop_table("employee")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "employee",
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("job_title", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], name="employee_user_id_fkey"),
        sa.PrimaryKeyConstraint("user_id", name="employee_pkey"),
    )
    op.create_table(
        "user_role",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('user_role_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("role", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="user_role_pkey"),
        sa.UniqueConstraint("role", name="user_role_role_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "user",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('user_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("username", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("hashed_password", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("first_name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("last_name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("role", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(["role"], ["user_role.id"], name="user_role_fkey"),
        sa.PrimaryKeyConstraint("id", name="user_pkey"),
        sa.UniqueConstraint("username", name="user_username_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_user_id", "user", ["id"], unique=False)
    op.create_table(
        "address",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('address_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("street", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("city", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("state", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("complement", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("zipcode", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="address_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "service",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "price",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("image", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("estimated_time", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("category", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="service_pkey"),
    )
    op.create_table(
        "customer_vehicle",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("vin", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("plate_code", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("vehicle_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.id"], name="customer_vehicle_user_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["vehicle_id"], ["vehicle.id"], name="customer_vehicle_vehicle_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="customer_vehicle_pkey"),
        sa.UniqueConstraint("vin", name="customer_vehicle_vin_key"),
    )
    op.create_index("ix_customer_vehicle_id", "customer_vehicle", ["id"], unique=False)
    op.create_table(
        "customer",
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("address_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["address_id"], ["address.id"], name="customer_address_id_fkey"
        ),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], name="customer_user_id_fkey"),
        sa.PrimaryKeyConstraint("user_id", name="customer_pkey"),
    )
    op.create_table(
        "vehicle",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("model", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("brand", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("color", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("year", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="vehicle_pkey"),
    )
    # ### end Alembic commands ###
